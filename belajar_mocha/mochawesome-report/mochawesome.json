{
  "stats": {
    "suites": 4,
    "tests": 17,
    "passes": 15,
    "pending": 0,
    "failures": 2,
    "start": "2023-11-27T00:45:47.517Z",
    "end": "2023-11-27T00:45:59.831Z",
    "duration": 12314,
    "testsRegistered": 17,
    "passPercent": 88.23529411764706,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a40e8e2b-d22e-4f97-af9e-2d8c04f5d695",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e6be3bbd-2cfa-4a96-9c1e-5d4f041469bf",
          "title": "Scenario List User Feature",
          "fullFile": "E:\\OGI APRIAGI\\Jago QA\\pertemuaan 3\\belajar_mocha\\test\\api-test\\list_user.test.js",
          "file": "\\test\\api-test\\list_user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Success Get List User with name valid",
              "fullTitle": "Scenario List User Feature 1. Verifying Success Get List User with name valid",
              "timedOut": false,
              "duration": 806,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = \"bujang\";\nconst response = await domain \n  .get(\"/list-user\")\n  .query({name})\n  \nexpect(response.body.status).to.eql('SUCCESS_USER_LIST');\nexpect(response.body.message).to.eql('List of registered users');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"pagination\", \"status\");",
              "err": {},
              "uuid": "628aac14-f862-49e8-967f-b576b9c60968",
              "parentUUID": "e6be3bbd-2cfa-4a96-9c1e-5d4f041469bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2. Verifying Success Get List User with email valid",
              "fullTitle": "Scenario List User Feature 2. Verifying Success Get List User with email valid",
              "timedOut": false,
              "duration": 589,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = \"bujang@gmail.com\";\nconst response = await domain \n  .get(\"/list-user\")\n  .query({email})\n  \nexpect(response.body.status).to.eql('SUCCESS_USER_LIST');\nexpect(response.body.message).to.eql('List of registered users');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"pagination\", \"status\");",
              "err": {},
              "uuid": "36b42d0f-c10b-47ca-8c0a-c7ba9e8cacb4",
              "parentUUID": "e6be3bbd-2cfa-4a96-9c1e-5d4f041469bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3. Verifying Success Get List User with email blank",
              "fullTitle": "Scenario List User Feature 3. Verifying Success Get List User with email blank",
              "timedOut": false,
              "duration": 594,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = \"\";\nconst response = await domain \n  .get(\"/list-user\")\n  .query({email})\n  \nexpect(response.body.status).to.eql('SUCCESS_USER_LIST');\nexpect(response.body.message).to.eql('List of registered users');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"pagination\", \"status\");",
              "err": {},
              "uuid": "2dc52ca4-34f4-4cb8-b9b1-cbeb811e908e",
              "parentUUID": "e6be3bbd-2cfa-4a96-9c1e-5d4f041469bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4. Verifying Success Get List User with name blank",
              "fullTitle": "Scenario List User Feature 4. Verifying Success Get List User with name blank",
              "timedOut": false,
              "duration": 619,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = \"\";\nconst response = await domain \n  .get(\"/list-user\")\n  .query({name})\n  \nexpect(response.body.status).to.eql('SUCCESS_USER_LIST');\nexpect(response.body.message).to.eql('List of registered users');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"pagination\", \"status\");",
              "err": {},
              "uuid": "786e791f-e102-487d-9225-afa406056b3d",
              "parentUUID": "e6be3bbd-2cfa-4a96-9c1e-5d4f041469bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5. Verifying failed Get List User with change methode",
              "fullTitle": "Scenario List User Feature 5. Verifying failed Get List User with change methode",
              "timedOut": false,
              "duration": 581,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const name = \"bujang\";\nconst response = await domain \n  .post(\"/list-user\")\n  .query({name})\n  \nexpect(response.body.status).to.eql('SUCCESS_USER_LIST');\nexpect(response.body.message).to.eql('List of registered users');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"pagination\", \"status\");",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 'SUCCESS_USER_LIST'",
                "estack": "AssertionError: expected undefined to deeply equal 'SUCCESS_USER_LIST'\n    at Context.<anonymous> (test\\api-test\\list_user.test.js:61:37)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f7aed28c-f977-4136-88ff-c663898a24b7",
              "parentUUID": "e6be3bbd-2cfa-4a96-9c1e-5d4f041469bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "628aac14-f862-49e8-967f-b576b9c60968",
            "36b42d0f-c10b-47ca-8c0a-c7ba9e8cacb4",
            "2dc52ca4-34f4-4cb8-b9b1-cbeb811e908e",
            "786e791f-e102-487d-9225-afa406056b3d"
          ],
          "failures": [
            "f7aed28c-f977-4136-88ff-c663898a24b7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3189,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9f15a48c-29ba-44ba-b445-b2a3d7eaea64",
          "title": "Scenario Login Feature",
          "fullFile": "E:\\OGI APRIAGI\\Jago QA\\pertemuaan 3\\belajar_mocha\\test\\api-test\\login.test.js",
          "file": "\\test\\api-test\\login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Success Login with valid email and password",
              "fullTitle": "Scenario Login Feature 1. Verifying Success Login with valid email and password",
              "timedOut": false,
              "duration": 647,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain \n  .post(\"/login\")\n  .send({ email: \"bujang@gmail.com\", password: \"bujang\" });\n  \nexpect(response.body.status).to.eql('SUCCESS_LOGIN');\nexpect(response.body.message).to.eql('Anda Berhasil Login');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\", \"credentials\");",
              "err": {},
              "uuid": "7618c07c-6cec-4c08-852b-689f571319bb",
              "parentUUID": "9f15a48c-29ba-44ba-b445-b2a3d7eaea64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2. Verifying Failed Login with valid email and invalid password",
              "fullTitle": "Scenario Login Feature 2. Verifying Failed Login with valid email and invalid password",
              "timedOut": false,
              "duration": 566,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n.post(\"/login\")\n.send({ email: \"bujang@gmail.com\", password: \"duda\" });\n\nexpect(response.body.status).to.eql('FAILED_LOGIN');\nexpect(response.body.data).to.eql('User\\'s not found');\nexpect(response.body.message).to.eql('Email atau Password Anda Salah');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.statusCode).to.eql(200)",
              "err": {},
              "uuid": "9c0431d2-d59e-4416-b368-9383f9e731c0",
              "parentUUID": "9f15a48c-29ba-44ba-b445-b2a3d7eaea64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3. Verifying Failed Login with invalid email and password",
              "fullTitle": "Scenario Login Feature 3. Verifying Failed Login with invalid email and password",
              "timedOut": false,
              "duration": 563,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n.post(\"/login\")\n.send({ email: \"bujang.@gmail.com\", password: \"perawan\" });\n\nexpect(response.body.status).to.eql('FAILED_LOGIN');\nexpect(response.body.data).to.eql('User\\'s not found');\nexpect(response.body.message).to.eql('Email atau Password Anda Salah');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.statusCode).to.eql(200)",
              "err": {},
              "uuid": "01434013-e677-4b65-b076-dc2bc09f9d90",
              "parentUUID": "9f15a48c-29ba-44ba-b445-b2a3d7eaea64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4. Verifying Failed Login with email and password wrong position",
              "fullTitle": "Scenario Login Feature 4. Verifying Failed Login with email and password wrong position",
              "timedOut": false,
              "duration": 637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n.post(\"/login\")\n.send({ email: \"bujang\", password: \"bujang@gmail.com\" });\n\nexpect(response.body.status).to.eql('FAILED_LOGIN');\nexpect(response.body.data).to.eql('Email tidak valid');\nexpect(response.body.message).to.eql('Cek kembali email anda');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.statusCode).to.eql(420)",
              "err": {},
              "uuid": "87927c4e-19e7-4cca-8d9e-07cddd7060f1",
              "parentUUID": "9f15a48c-29ba-44ba-b445-b2a3d7eaea64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7618c07c-6cec-4c08-852b-689f571319bb",
            "9c0431d2-d59e-4416-b368-9383f9e731c0",
            "01434013-e677-4b65-b076-dc2bc09f9d90",
            "87927c4e-19e7-4cca-8d9e-07cddd7060f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2413,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b47bedbb-ce1d-4af0-8e26-efe9a763867c",
          "title": "Scenario Register Feature",
          "fullFile": "E:\\OGI APRIAGI\\Jago QA\\pertemuaan 3\\belajar_mocha\\test\\api-test\\register.test.js",
          "file": "\\test\\api-test\\register.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Failed Register With Duplicate Email Address",
              "fullTitle": "Scenario Register Feature 1. Verifying Failed Register With Duplicate Email Address",
              "timedOut": false,
              "duration": 590,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n    .post(\"/register\")\n    .send({ email: \"bujang@gmail.com\", password: \"bujang\", name:\"bujang\" });\nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.data).to.eql('Email sudah terdaftar, gunakan Email lain');\nexpect(response.body.message).to.eql('Gagal Registrasi');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.statusCode).to.eql(420)",
              "err": {},
              "uuid": "2dbe8e75-aae0-40f7-8bff-c06ec98041f3",
              "parentUUID": "b47bedbb-ce1d-4af0-8e26-efe9a763867c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2. Verifying Success Register",
              "fullTitle": "Scenario Register Feature 2. Verifying Success Register",
              "timedOut": false,
              "duration": 587,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n     .post(\"/register\")\n     .send({ email: \"bujang@gmail.com\", password: \"bujang\", name: \"bujang\" });\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.body.data).to.eql('berhasil');\nexpect(response.body.message).to.eql('created user!');\nexpect(response.body.status).to.eql('SUCCESS_REGISTER');",
              "err": {
                "message": "AssertionError: expected 'Email sudah terdaftar, gunakan Email lain' to deeply equal 'berhasil'",
                "estack": "AssertionError: expected 'Email sudah terdaftar, gunakan Email lain' to deeply equal 'berhasil'\n    at Context.<anonymous> (test\\api-test\\register.test.js:23:39)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Email sudah terdaftar, gunakan Email lain\n+ berhasil\n"
              },
              "uuid": "5e0ba234-c225-4b15-892f-6e1ed9cdab3e",
              "parentUUID": "b47bedbb-ce1d-4af0-8e26-efe9a763867c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3. Verifying Success Register With Random Email Address",
              "fullTitle": "Scenario Register Feature 3. Verifying Success Register With Random Email Address",
              "timedOut": false,
              "duration": 646,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7); \nconst response = await domain\n    .post(\"/register\")\n    .send({ email: random_email + \"@gmail.com\", password: random_email, name: random_email });\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.body.data).to.eql('berhasil');\nexpect(response.body.message).to.eql('created user!');\nexpect(response.body.status).to.eql('SUCCESS_REGISTER');",
              "err": {},
              "uuid": "612a44c8-e390-4f4c-84da-d812e8891ce2",
              "parentUUID": "b47bedbb-ce1d-4af0-8e26-efe9a763867c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4. Verifying Failed Register With Email Address blank",
              "fullTitle": "Scenario Register Feature 4. Verifying Failed Register With Email Address blank",
              "timedOut": false,
              "duration": 576,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n    .post(\"/register\")\n    .send({ email: \"\", password: \"bujang\", name:\"bujang\" });\n    \nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.data).to.eql('Email/Username/Password tidak boleh kosong');\nexpect(response.body.message).to.eql('Gagal Registrasi');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.statusCode).to.eql(420)",
              "err": {},
              "uuid": "c4df2db6-60f7-437e-96ee-dc8e2aaa7b0c",
              "parentUUID": "b47bedbb-ce1d-4af0-8e26-efe9a763867c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5. Verifying Failed Register With name have a symbol",
              "fullTitle": "Scenario Register Feature 5. Verifying Failed Register With name have a symbol",
              "timedOut": false,
              "duration": 567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n    .post(\"/register\")\n    .send({ email: \"bujang@gmail.com\", password: \"bujang\", name:\"bujang?\" });\n    \nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.data).to.eql('Password tidak valid');\nexpect(response.body.message).to.eql('Tidak boleh mengandung symbol');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.statusCode).to.eql(420)",
              "err": {},
              "uuid": "7e480ad5-44ee-4b66-a876-9f895afb74f6",
              "parentUUID": "b47bedbb-ce1d-4af0-8e26-efe9a763867c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2dbe8e75-aae0-40f7-8bff-c06ec98041f3",
            "612a44c8-e390-4f4c-84da-d812e8891ce2",
            "c4df2db6-60f7-437e-96ee-dc8e2aaa7b0c",
            "7e480ad5-44ee-4b66-a876-9f895afb74f6"
          ],
          "failures": [
            "5e0ba234-c225-4b15-892f-6e1ed9cdab3e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2966,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3467cb51-4739-47d4-beb0-6f987ec6b65d",
          "title": "Scenario Update Profile Feature",
          "fullFile": "E:\\OGI APRIAGI\\Jago QA\\pertemuaan 3\\belajar_mocha\\test\\api-test\\update_profile.test.js",
          "file": "\\test\\api-test\\update_profile.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Success Update Profile",
              "fullTitle": "Scenario Update Profile Feature 1. Verifying Success Update Profile",
              "timedOut": false,
              "duration": 1184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseLogin = await domain \n  .post(\"/login\")\n  .send({ email: \"bujang@gmail.com\", password: \"bujang\" });\n\nconst authToken = responseLogin.body.credentials.access_token;    \nconst response = await domain \n  .put(\"/update-profile\")\n  .set(\"Authorization\", `${authToken}`)\n  .send({name: \"agus\"})\n\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");  \nexpect(response.body.data).to.eql('Username Anda menjadi agus');\nexpect(response.body.message).to.eql('Berhasil Perbarui Profile');\nexpect(response.body.status).to.eql('SUCCESS_UPDATE_PROFILE')",
              "err": {},
              "uuid": "ecccd6eb-8c55-4092-83ea-f0ddfd66a571",
              "parentUUID": "3467cb51-4739-47d4-beb0-6f987ec6b65d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2. Verifying Failed Update Profile with name blank",
              "fullTitle": "Scenario Update Profile Feature 2. Verifying Failed Update Profile with name blank",
              "timedOut": false,
              "duration": 1211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseLogin = await domain \n  .post(\"/login\")\n  .send({ email: \"bujang@gmail.com\", password: \"bujang\" });\n\nconst authToken = responseLogin.body.credentials.access_token;    \nconst response = await domain \n  .put(\"/update-profile\")\n  .set(\"Authorization\", `${authToken}`)\n  .send({name: \"\"})\n\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");  \nexpect(response.body.data).to.eql('Username tidak boleh kosong');\nexpect(response.body.message).to.eql('Gagal Update Profile');\nexpect(response.body.status).to.eql('FAILED_UPDATE_PROFILE')",
              "err": {},
              "uuid": "ec4bafb2-927d-4a20-9cbd-7883119158d9",
              "parentUUID": "3467cb51-4739-47d4-beb0-6f987ec6b65d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4. Verifying Failed Update Profile with name have a symbol",
              "fullTitle": "Scenario Update Profile Feature 4. Verifying Failed Update Profile with name have a symbol",
              "timedOut": false,
              "duration": 1262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseLogin = await domain \n  .post(\"/login\")\n  .send({ email: \"bujang@gmail.com\", password: \"bujang\" });\n\nconst authToken = responseLogin.body.credentials.access_token;    \nconst response = await domain \n  .put(\"/update-profile\")\n  .set(\"Authorization\", `${authToken}`)\n  .send({name: \"bujang?\"})\n\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");  \nexpect(response.body.data).to.eql('Nama tidak valid');\nexpect(response.body.message).to.eql('Tidak boleh mengandung symbol');\nexpect(response.body.status).to.eql('FAILED_UPDATE_PROFILE')",
              "err": {},
              "uuid": "cc35e72f-bfec-407b-b018-ce578bd31d97",
              "parentUUID": "3467cb51-4739-47d4-beb0-6f987ec6b65d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ecccd6eb-8c55-4092-83ea-f0ddfd66a571",
            "ec4bafb2-927d-4a20-9cbd-7883119158d9",
            "cc35e72f-bfec-407b-b018-ce578bd31d97"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3657,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}